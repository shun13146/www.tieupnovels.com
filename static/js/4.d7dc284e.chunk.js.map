{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","fetcherimpl/PrecompiledFetcher.ts","fetcherimpl/index.ts","components/NovelIndex.tsx","components/pages/IndexPage.tsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","fetcher","pickups","novels","a","aaaafbfe","episodes","fetchNovel","novel_id","novel","NovelFetchError","default","fetchEpisode","episode_id","episode","index","meta","lines","console","log","some","it","has_next","length","fetchEpisodeList","ret","eps","idx","push","searchNovel","query","Promise","all","keys","filter","hasOwnProperty","map","id","ns","findIndex","mt","reduce","prev","process","FETCHER_IMPL","backendFetcher","precompiledFetcher","NovelIndex","props","state","this","then","list","setState","catch","err","error","source","type","phase","detail","className","title","author","src","binding","alt","summary","to","sub_title","Component","IndexPage","window","location","hash","match","groups","nid"],"mappings":"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","file":"static/js/4.d7dc284e.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","/* eslint-disable no-await-in-loop, quote-props */\r\nimport NovelFetchError from './NovelFetchError';\r\n\r\nconst pickups = [\r\n  '4157ac86',\r\n  'aaaafbfe'\r\n];\r\nconst novels: KeyedStorage<{(): Promise<NovelMeta>}> = {\r\n  '4157ac86': async () => import('./novel_data/.novels/4157ac86/meta.json') as any as Promise<NovelMeta>,\r\n  '21481650': async () => import('./novel_data/.novels/21481650/meta.json') as any as Promise<NovelMeta>,\r\n  aaaafbfe: async () => import('./novel_data/.novels/aaaafbfe/meta.json') as any as Promise<NovelMeta>,\r\n};\r\nconst episodes: KeyedStorage<{(): Promise<Episode>}[]> = {\r\n  '4157ac86': [\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0001.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0002.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0003.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0004.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0005.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0006.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/4157ac86/episode_0007.json') as any as Promise<Episode>,\r\n  ],\r\n  '21481650': [\r\n    async () => import('./novel_data/.novels/21481650/episode_0001.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/21481650/episode_0002.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/21481650/episode_0003.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/21481650/episode_0004.json') as any as Promise<Episode>,\r\n  ],\r\n  aaaafbfe: [\r\n    async () => import('./novel_data/.novels/aaaafbfe/episode_0001.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/aaaafbfe/episode_0002.json') as any as Promise<Episode>,\r\n    async () => import('./novel_data/.novels/aaaafbfe/episode_0003.json') as any as Promise<Episode>,\r\n  ],\r\n};\r\n\r\nexport default {\r\n  async fetchNovel(novel_id: string): Promise<NovelMeta> {\r\n    const novel = novels[novel_id];\r\n    if (!novel) {\r\n      throw new NovelFetchError('novel_not_found');\r\n    }\r\n    return (await novel() as any).default;\r\n  },\r\n  async fetchEpisode(novel_id: string, episode_id: string): Promise<FetchedEpisodeData> {\r\n    const novel = novels[novel_id];\r\n    if (!novel) {\r\n      throw new NovelFetchError('novel_not_found');\r\n    }\r\n    const index = (episode_id as any as number) * 1;\r\n    const episode = episodes[novel_id][index];\r\n    if (!episode) {\r\n      throw new NovelFetchError('episode_not_found');\r\n    }\r\n    const { meta, lines } = (await episode() as any).default;\r\n    console.log(lines.some((it: any) => !it));\r\n    return {\r\n      meta: (await novel() as any).default,\r\n      episode: {\r\n        lines,\r\n        meta: {\r\n          novel_id,\r\n          has_next: episodes[novel_id].length > (index + 1),\r\n          ...meta,\r\n        },\r\n      },\r\n    };\r\n  },\r\n  async fetchEpisodeList(novel_id: string): Promise<EpisodeMeta[]> {\r\n    const eps = episodes[novel_id];\r\n    const ret = [];\r\n    if (!eps) {\r\n      throw new NovelFetchError('novel_not_found');\r\n    }\r\n    for (let idx = 0; idx < eps.length; idx++) {\r\n      const it = eps[idx];\r\n      const { meta } = (await it() as any).default;\r\n      ret.push({ novel_id, has_next: idx !== eps.length - 1, ...meta });\r\n    }\r\n    return ret;\r\n  },\r\n  async searchNovel(query: string): Promise<KeyedStorage<NovelMeta>> {\r\n    let ns = await Promise.all(\r\n      Object\r\n        .keys(novels)\r\n        .filter((it) => novels.hasOwnProperty(it))\r\n        .map(async (it) => ({ novel: await novels[it](), id: it })));\r\n    if (query === 'filter:pickup') {\r\n      ns = ns.filter((it) => pickups.findIndex((mt) => mt === it.id) !== -1);\r\n    }\r\n    return ns.reduce((prev, it) => ({ [it.id]: it.novel, ...prev }), {});\r\n  },\r\n};\r\n","import backendFetcher from './BackendNovelFetcher';\r\nimport precompiledFetcher from './PrecompiledFetcher';\r\n\r\nlet fetcher: NovelFetcher;\r\n\r\nif (process.env.FETCHER_IMPL === 'backend') {\r\n  fetcher = backendFetcher;\r\n} else {\r\n  fetcher = precompiledFetcher;\r\n}\r\n\r\nexport default fetcher;\r\n","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport fetcher from '../fetcherimpl';\nimport NovelFetchError from '../fetcherimpl/NovelFetchError';\n\ninterface Props {\n  novel?: string;\n}\ninterface State {\n  list?: EpisodeMeta[];\n  novel?: NovelMeta;\n  error?: FetchErrorType;\n}\n\nclass NovelIndex extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (!this.props.novel) {\n      this.setState({\n        error: {\n          type: 'error',\n          phase: 'precondition',\n          detail: 'URLが不正です。',\n        },\n      });\n      return;\n    }\n    fetcher\n      .fetchEpisodeList(this.props.novel)\n      .then((list) => {\n        this.setState({ list });\n      })\n      .catch((err: NovelFetchError) => {\n        this.setState({ error: err.source });\n      });\n    fetcher\n      .fetchNovel(this.props.novel)\n      .then((novel) => {\n        this.setState({ novel });\n      })\n      .catch((err: NovelFetchError) => {\n        this.setState({ error: err.source });\n      });\n  }\n\n  render() {\n    if (this.state.error) {\n      switch (this.state.error) {\n      case 'novel_not_found':\n        return (\n          <div className=\"reader\">\n            <div className=\"modal\">\n              <span className=\"modal-content_single\">\n                小説が見つかりません。削除済みか、URLが間違っています。\n              </span>\n            </div>\n          </div>\n        );\n      case 'episode_not_found':\n        return (\n          <div className=\"reader\">\n            <div className=\"modal\">\n              <span className=\"modal-content_single\">\n                指定された小説の部分が見つかりません。削除済みか未投稿、またはURLが間違っています。\n              </span>\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"reader\">\n            <div className=\"modal\">\n              <span className=\"modal-content_single\">\n                技術的な問題が発生しました。お手数ですが、エラーメッセージを添えてお問い合わせください。\n                <span className=\"error-details\">{this.state.error.detail}</span>\n              </span>\n            </div>\n          </div>\n        );\n      }\n    }\n    if (!this.state.novel || !this.state.list) {\n      return (\n        <div className=\"novel-index\">\n          <div className=\"spinner\" />\n        </div>\n      );\n    }\n    console.log(this.state.list);\n    return (\n      <div className=\"novel-index\">\n        <div className=\"episode-list-container\">\n          <div className=\"novel-details\">\n            <h1 className=\"novel-title\">{this.state.novel.title}</h1>\n            <div className=\"novel-author\">{this.state.novel.author}</div>\n            <div className=\"novel-summary-container\">\n              <div className=\"novel-thumbnail\">\n                <img src={this.state.novel.binding} alt={this.state.novel.title} />\n              </div>\n              <div className=\"novel-summary\">{this.state.novel.summary}</div>\n            </div>\n          </div>\n          <h2>エピソード</h2>\n          <ol className=\"episode-list\">\n            {\n              this\n                .state\n                .list\n                .map((it, idx) => (\n                  <li>\n                    <Link to={`/view/${this.props.novel}/${idx}`}>{it.sub_title}</Link>\n                  </li>\n                ))\n            }\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NovelIndex;\n","import React, { FC } from 'react';\nimport NovelIndex from '../NovelIndex';\n\nconst getEpisodeId = (): string | undefined => {\n  return ((window.location.hash.match(/^#\\/view\\/(?<nid>[a-zA-Z0-9]{8})/) || {}).groups || {}).nid;\n};\n\nconst IndexPage: FC = () => (\n  <NovelIndex novel={getEpisodeId()} />\n);\n\nexport default IndexPage;\n"],"sourceRoot":""}